
I think that we should move Tie_engraver from Voice to Staff context.  That would enable cross-voice ties with no additional effort (in contrast to very ugly and laborious hidden-notes approach).  I don't think this would introduce unsolvable problems (we probably should ask big heads like David and Han-Wen).  Currently, there are some problems:

\version "2.17.23"
\new Staff <<
  \new Voice{
    \voiceOne
    f''8 e'' d'' f'' g''2
  }
  \new Voice {
    \voiceTwo
    d''2~ d''2
  }
>>
\layout {
  \context {
    \Voice
    \remove Tie_engraver
  }
  \context {
    \Staff
    \consists Tie_engraver
  }
}

(the tie connects wrong notes).
However, this is just a bug - LilyPond should check whether the tied note has already ended before connencting it with another note.
One thing that we'll have to consider is how to support "tieWaitForNote" when the Tie_engraver will be in the staff context.  For example, how to handle this?

\new Staff \relative c' <<
  \new Voice {
    \voiceOne
    \set tieWaitForNote = ##t
    f16~ g a~ b c_~ d e f_~ <f, a c f>2
  }
  \new Voice {
    \voiceTwo
    d4 f8 e c2
  }
>>

Here's the problem: if the Tie_engraver will be in staff context, f16 would be connected to f8 in another voice, instead of f2.  Probably the solution is to have a "sameVoiceOnly" property of the tie, which forces LilyPond to use such ties only to connect notes in the same Voice.



One idea about tieWaitForNote: maybe it could be on by default when the next column after the tied note contains only spacers?  So that c~ s c would be tied by default.

Another idea about tieWaitForNote: when a tie (tilde) is attached to a note and not a chord (i.e. <c~ d~>, not <c d>~), it should always wait?  A chord shouldn't wait, because { <c e>~ c } would produce a waiting tie, which is generally unwanted.
